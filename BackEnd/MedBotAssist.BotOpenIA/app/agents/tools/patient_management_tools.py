"""
Patient Management Tools

This module includes all the tools needed to create and update patient records.
To use any of these tools, users must have both the UseAgent and ManagePatients permissions.
"""

from typing import Optional
from langchain.tools import tool
from app.services.database_service import DatabaseService
from app.services.permission_context import permission_context
from app.core.config import settings
from .permission_validators import validate_patient_management_permissions
import httpx
import json
import logging

logger = logging.getLogger(__name__)

# Initialize the database service
# Initialize the database service lazily
database_service = None

def get_database_service():
    """Get or create database service instance."""
    global database_service
    if database_service is None:
        database_service = DatabaseService()
    return database_service


@tool
def create_patient(
    name: str,
    identification_number: str,
    date_of_birth: str,
    age: int,
    phone_number: str,
    email: str
) -> str:
    """
    Create a new patient in the external backend system.
    
    Args:
        name: Full name of the patient
        identification_number: Patient's identification number (must be unique)
        date_of_birth: Date of birth in ISO format (YYYY-MM-DDTHH:mm:ss.sssZ)
        age: Age of the patient in years
        phone_number: Patient's phone number
        email: Patient's email address
    
    Examples:
    - create_patient("Juan Pérez", "12345678", "1990-05-15", 33, "+57-300-123-4567", "juan.perez@email.com")
    - create_patient("María García", "23456789", "1985-12-10", 38, "+57-301-123-4567", "maria.garcia@gmail.com")

    **Requires Permissions:** UseAgent, ManagePatients
    """
    try:
        # 1. Check permissions
        has_permission, error_msg = validate_patient_management_permissions()
        if not has_permission:
            return error_msg
        
        # 2. Get JWT token from permission context
        jwt_token = permission_context.get_jwt_token()
        if not jwt_token:
            return "Error: JWT token for authentication with the external backend not found"
        
        # 3. Prepare the payload
        payload = {
            "patientId": "0",  # Auto-generated by the backend
            "name": name,
            "identificationNumber": identification_number,
            "dateOfBirth": date_of_birth,
            "age": age,
            "phoneNumber": phone_number,
            "email": email
        }

        # 4. Make HTTP request to external backend
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {jwt_token}"
        }
        
        url = f"{settings.EXTERNAL_BACKEND_API_URL.rstrip('/')}/Patient/create"
        
        # 5. Log the request for debugging
        logger.info(f"Making request to: {url}")
        logger.info(f"Request payload: {payload}")
        logger.info(f"Request headers: {{'Content-Type': 'application/json', 'Authorization': 'Bearer [TOKEN]'}}")
        
        with httpx.Client(timeout=30.0) as client:
            response = client.post(
                url=url,
                json=payload,
                headers=headers
            )
            
            # 6. Log the response for debugging
            logger.info(f"Response status code: {response.status_code}")
            logger.info(f"Response headers: {dict(response.headers)}")
            logger.info(f"Response text: {response.text}")
            
            if response.status_code == 200 or response.status_code == 201:
                # Success
                try:
                    result = response.json()
                    patient_id = result.get('patientId', 'N/A')
                    
                    success_msg = f""" **Patient Successfully Created**

**Patient Information:**
  - System ID: {patient_id}
  - Name: {name}
  - Identification Number: {identification_number}
  - Date of Birth: {date_of_birth}
  - Age: {age} years
  - Phone: {phone_number}
  - Email: {email}

The patient has been successfully registered in the system."""

                    return success_msg
                    
                except json.JSONDecodeError:
                    return f""" **Patient Successfully Created**

The patient '{name}' with identification '{identification_number}' has been successfully registered in the system.
Response code: {response.status_code}"""

            elif response.status_code == 400:
                # Bad request - validation errors
                try:
                    error_data = response.json()
                    error_details = error_data.get('errors', error_data.get('message', 'Validation error'))

                    return f""" **Validation Error**

The patient could not be created due to errors in the provided data:

**Error Details:** {error_details}

Please check that:
  - The identification number is not duplicated
  - The date format is correct (YYYY-MM-DDTHH:mm:ss.sssZ)
  - The email is in a valid format
  - All required fields are complete"""

                except json.JSONDecodeError:
                    return f"Validation Error: {response.text}"

            elif response.status_code == 401:
                return "Authentication Error: Invalid or expired JWT token"

            elif response.status_code == 403:
                return "Authorization Error: You do not have permission to create patients in the external backend"

            else:
                # Other errors
                try:
                    error_data = response.json()
                    error_msg = error_data.get('message', f'Server Error: {response.status_code}')
                except json.JSONDecodeError:
                    error_msg = f'Server Error: {response.status_code} - {response.text}'

                return f"Error creating patient: {error_msg}"

    except httpx.TimeoutException:
        return "Error: Timeout while contacting external backend"

    except httpx.RequestError as e:
        return f"Connection Error: {str(e)}"

    except Exception as e:
        logger.error(f"Error creating patient: {e}")
        return f"Unexpected Error: {str(e)}"


@tool
def update_patient(
    identification_number: str,
    name: Optional[str] = None,
    date_of_birth: Optional[str] = None,
    age: Optional[int] = None,
    phone_number: Optional[str] = None,
    email: Optional[str] = None
) -> str:
    """
    Update patient information in the external backend system.
    The identification_number is required, and you can update any combination of the other fields.
    
    Args:
        identification_number: Patient's identification number (required for lookup)
        name: New full name of the patient (optional)
        date_of_birth: New date of birth in ISO format (YYYY-MM-DDTHH:mm:ss.sssZ) (optional)
        age: New age of the patient in years (optional)
        phone_number: New phone number (optional)
        email: New email address (optional)
    
    Examples:
    - update_patient("12345678", name="Juan Carlos Pérez")
    - update_patient("23456789", email="nueva.email@gmail.com", phone_number="+57-301-555-1234")
    - update_patient("34567809", age=31, date_of_birth="1992-08-15")
    
    **Requires Permissions:** UseAgent, ManagePatients
    """
    try:
        # 1. Check permissions
        has_permission, error_msg = validate_patient_management_permissions()
        if not has_permission:
            return error_msg

        # 2. Get JWT token from permission context
        jwt_token = permission_context.get_jwt_token()
        if not jwt_token:
            return "Error: JWT token for authentication with the external backend not found"

        # 3. Get the raw patient data from database directly
        patients = get_database_service().get_all_patients()
        current_patient = None
        for patient in patients:
            if patient.get('identification_number') == identification_number:
                current_patient = patient
                break
        
        if not current_patient:
            return f"Error: Patient with ID could not be found. '{identification_number}'"

        # 4. Log current patient data for debugging
        logger.info(f"Current patient data: {current_patient}")
        
        # 5. Extract and prepare current data with proper defaults
        current_name = current_patient.get('full_name') or current_patient.get('name', '')
        current_phone = current_patient.get('phone') or current_patient.get('phone_number', '')
        current_email = current_patient.get('email', '')
        current_age = current_patient.get('age', 0)
        
        # 6. Handle birth_date formatting
        current_birth_date = current_patient.get('birth_date', '')
        if current_birth_date:
            # Ensure ISO format with timezone
            if isinstance(current_birth_date, str):
                if 'T' not in current_birth_date:
                    current_birth_date = current_birth_date + 'T00:00:00'
                if not current_birth_date.endswith('Z') and not current_birth_date.endswith('.000Z'):
                    if '.' not in current_birth_date:
                        current_birth_date = current_birth_date + '.000Z'
                    else:
                        current_birth_date = current_birth_date + 'Z'
        else:
            current_birth_date = '1900-01-01T00:00:00.000Z'  # Default if missing
        
        # 7. Build the COMPLETE payload - always send ALL fields
        payload = {
            "patientId": "0",  # Always "0" as specified
            "name": str(name if name is not None else current_name),
            "identificationNumber": str(identification_number),
            "dateOfBirth": str(date_of_birth if date_of_birth is not None else current_birth_date),
            "age": int(age if age is not None else current_age),
            "phoneNumber": str(phone_number if phone_number is not None else current_phone),
            "email": str(email if email is not None else current_email)
        }
        
        # 8. Log the complete payload for debugging
        logger.info(f"Complete payload being sent: {payload}")

        # 9. Make HTTP request to external backend
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {jwt_token}"
        }
        
        url = f"{settings.EXTERNAL_BACKEND_API_URL.rstrip('/')}/Patient/update-patient"
        
        # 10. Log the request for debugging
        logger.info(f"Making PUT request to: {url}")
        logger.info(f"Request payload: {payload}")
        logger.info(f"Request headers: {{'Content-Type': 'application/json', 'Authorization': 'Bearer [TOKEN]'}}")
        
        with httpx.Client(timeout=30.0) as client:
            response = client.put(
                url=url,
                json=payload,
                headers=headers
            )
            
            # Log the response for debugging
            logger.info(f"Response status code: {response.status_code}")
            logger.info(f"Response headers: {dict(response.headers)}")
            logger.info(f"Response text: {response.text}")
            
            if response.status_code == 200 or response.status_code == 204:
                # Success
                updated_fields = []
                if name is not None:
                    updated_fields.append(f"Nombre: {name}")
                if date_of_birth is not None:
                    updated_fields.append(f"Fecha de Nacimiento: {date_of_birth}")
                if age is not None:
                    updated_fields.append(f"Edad: {age} años")
                if phone_number is not None:
                    updated_fields.append(f"Teléfono: {phone_number}")
                if email is not None:
                    updated_fields.append(f"Email: {email}")
                
                success_msg = f""" **Patient Successfully Updated**

**Patient ID:** {identification_number}
**Updated Fields:**
{chr(10).join(f"  • {field}" for field in updated_fields)}

The patient's information has been successfully updated in the system."""
                
                return success_msg
                    
            elif response.status_code == 400:
                try:
                    error_data = response.json()
                    error_details = error_data.get('errors', error_data.get('message', 'Validation error'))
                    
                    return f""" **Validation Error**

The patient could not be updated due to errors in the provided data:

**Error Details:** {error_details}

Please verify that:
  - The identification number is valid
  - The date format is correct (YYYY-MM-DDTHH:mm:ss.sssZ)
  - The email has a valid format
  - The provided fields are valid"""

                except json.JSONDecodeError:
                    return f"Validation Error: {response.text}"

            elif response.status_code == 401:
                return "Authentication Error: Invalid or expired JWT token"

            elif response.status_code == 403:
                return "Authorization Error: You do not have permission to update patients in the external backend"

            elif response.status_code == 404:
                return f"Error: The patient with identification '{identification_number}' was not found in the external backend"

            else:
                # Other errors
                try:
                    error_data = response.json()
                    error_msg = error_data.get('message', f'Server Error: {response.status_code}')
                except json.JSONDecodeError:
                    error_msg = f'Server Error: {response.status_code} - {response.text}'

                return f"Error updating patient: {error_msg}"

    except httpx.TimeoutException:
        return "Error: Timeout while contacting external backend"

    except httpx.RequestError as e:
        return f"Connection Error: {str(e)}"

    except Exception as e:
        logger.error(f"Error updating patient: {e}")
        return f"Unexpected Error updating patient: {str(e)}"

#!/usr/bin/env python3
"""
Test script to validate text normalization in searches.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.database_service import normalize_text_for_search

def test_normalization():
    """Text normalization tests"""
    
    print("üß™ Text normalization tests for searches")
    print("=" * 60)
    
    test_cases = [
        # (original_text, expected_normalized_text)
        ("S√°nchez Garc√≠a", "sanchez garcia"),
        ("Jos√© Mar√≠a", "jose maria"),
        ("P√âREZ", "perez"),
        ("√Ångel Rodr√≠guez", "angel rodriguez"),
        ("Mar√≠a Jos√© Hern√°ndez", "maria jose hernandez"),
        ("GONZ√ÅLEZ L√ìPEZ", "gonzalez lopez"),
        ("   Extra   Space   ", "extra space"),
        ("Ni√±o con √±", "nino con n"),
        ("Multiple   spaces", "multiple spaces"),
        ("", ""),  # empty text
    ]
    
    all_passed = True
    
    for i, (original, expected) in enumerate(test_cases, 1):
        result = normalize_text_for_search(original)
        status = "‚úÖ PASS" if result == expected else "‚ùå FAIL"
        
        if result != expected:
            all_passed = False
        
        print(f"{i:2d}. {status} '{original}' -> '{result}'")
        if result != expected:
            print(f"     Expected: '{expected}'")
    
    print("\n" + "=" * 60)
    if all_passed:
        print("‚úÖ All tests passed correctly!")
    else:
        print("‚ùå Some tests failed.")
    
    return all_passed

def test_search_examples():
    """Examples of how searches will work"""
    
    print("\nüîç Examples of searches that will now work:")
    print("=" * 60)
    
    examples = [
        ("User searches: 'sanchez'", "Will find: 'S√°nchez Garc√≠a'"),
        ("User searches: 'jose maria'", "Will find: 'Jos√© Mar√≠a Rodr√≠guez'"),
        ("User searches: 'PEREZ'", "Will find: 'P√©rez L√≥pez'"),
        ("User searches: 'angel'", "Will find: '√Ångel Hern√°ndez'"),
        ("User searches: 'gonzalez'", "Will find: 'Gonz√°lez Mart√≠nez'"),
    ]
    
    for search, result in examples:
        print(f"‚Ä¢ {search}")
        print(f"  ‚Üí {result}")
        print()

if __name__ == "__main__":
    success = test_normalization()
    test_search_examples()
    
    if success:
        print("üéâ Normalization is ready to use!")
    else:
        print("‚ö†Ô∏è  Need to review normalization implementation.")
